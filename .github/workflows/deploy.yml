name: CI + Deploy Rails App to Azure VM

on:
  push:
    branches: [ main ]

concurrency:
  group: rails-minimal-users-main
  cancel-in-progress: true

jobs:
  test:
    name: Run tests on self-hosted runner
    runs-on: [self-hosted, azure, vm]
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show workspace
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd && ls -la

      # - name: Bundle install (test)
      #   shell: bash -l {0}
      #   run: |
      #     bundle config set path 'vendor/bundle'
      #     bundle install

      # - name: Prepare DB test
      #   shell: bash -l {0}
      #   env:
      #     RAILS_ENV: test
      #   run: |
      #     if [ -x bin/rails ]; then
      #       bundle exec rails db:prepare
      #     else
      #       bundle exec rake db:prepare
      #     fi

      # - name: Run test (RSpec or Minitest)
      #   shell: bash -l {0}
      #   run: |
      #     if [ -d spec ] || grep -qi rspec Gemfile; then
      #       bundle exec rspec --format documentation
      #     else
      #       bundle exec rails test
      #     fi

  deploy:
    name: Deploy to production folder on VM
    runs-on: [self-hosted, azure, vm]
    needs: test
    env:
      APP_DIR: /home/azureuser/rails-minimal-users
      SERVICE_NAME: railsapp
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull code repo production
        run: |
          cd "$APP_DIR"

          git pull origin main

          sudo chown -R azureuser:azureuser "$APP_DIR"

      - name: Load secrets from VM and export to this job (robust)
        shell: bash -l {0}
        working-directory: ${{ env.APP_DIR }}
        run: |
          set -u

          if [ -f config/master.key ]; then
            echo "RAILS_MASTER_KEY=$(cat config/master.key)" >> "$GITHUB_ENV"
            echo "[env] RAILS_MASTER_KEY exported from config/master.key"
          fi

          SKB_INTERACTIVE="$(bash -ic 'printenv SECRET_KEY_BASE 2>/dev/null || true')"
          if [ -n "${SKB_INTERACTIVE:-}" ]; then
            echo "SECRET_KEY_BASE=${SKB_INTERACTIVE}" >> "$GITHUB_ENV"
            echo "[env] SECRET_KEY_BASE exported from interactive bash"
          fi

          set +u
          set -a
          [ -f .env.production ] && . ./.env.production
          [ -f .env ] && . ./.env
          set +a
          set -u
          if [ -n "${SECRET_KEY_BASE:-}" ]; then
            echo "SECRET_KEY_BASE=${SECRET_KEY_BASE}" >> "$GITHUB_ENV"
            echo "[env] SECRET_KEY_BASE exported from .env file"
          fi

          echo "[env] Have RAILS_MASTER_KEY? $( [ -n "${RAILS_MASTER_KEY:-}" ] && echo yes || echo no )"
          echo "[env] Have SECRET_KEY_BASE? $( [ -n "${SECRET_KEY_BASE:-}" ] && echo yes || echo no )"


      - name: Bundle install (production)
        shell: bash -l {0}
        working-directory: ${{ env.APP_DIR }}
        run: |
          bundle config set deployment 'true'
          bundle config set without 'development test'
          bundle install

      - name: DB migrate (production)
        shell: bash -l {0}
        working-directory: ${{ env.APP_DIR }}
        env:
          RAILS_ENV: production
        run: |
          bundle exec rails db:migrate

      - name: Assets precompile (production)
        shell: bash -l {0}
        working-directory: ${{ env.APP_DIR }}
        env:
          RAILS_ENV: production
        run: |
          bundle exec rails assets:precompile

      - name: Restart app service
        run: |
          sudo systemctl restart "${SERVICE_NAME}"
          sudo systemctl status  "${SERVICE_NAME}" --no-pager -l || true
          echo "Deployment to Azure VM completed."
